open Core

(* module Sexp = Sexp.Annotated *)
module SexpA = Sexp.Annotated

type expr = Sexp.t [@@deriving sexp]

type stmt =
  | Skip
  | If of expr * stmt * stmt
  | Begin of stmt list [@sexp.list]
  | Set of Sexp.t * expr
  [@@deriving sexp]


let bv_sort (width : int) : Sexp.t =  Sexp.List
  [
    Sexp.Atom "_";
    Sexp.Atom "BitVec";
    Sexp.Atom (Int.to_string width);
  ]

type macro = Sexp.t list -> (Sexp.t, string) Result.t

(*
Post order expansion or preorder expansion?
Lazy vs eager?
Hmm. I guess eager really needs to call back into the expander system
*)
(*
let macro_run (macros : macro String.Map.t) (sexp : Sexp.t) : (Sexp.t,string) Result.t =
  let rec worker sexp =
    match sexp with
    | Sexp.Atom _ -> sexp
    | Sexp.List t -> (
        let sexp = List.map ~f:worker t in
        match sexp with
        | Sexp.Atom f :: args -> (
            match String.Map.find macros f with
            | None -> Sexp.List sexp
            | Some f ->
                f args
                (* Hmm recurse here? We don't persay have to  - worker (f args) *)
            )
        | _ -> Sexp.List sexp )
  in
  worker sexp
*)
let macro_run (macros : macro String.Map.t) (sexp : Sexp.t) :
    (Sexp.t, string) Result.t =
  let ( let* ) x f = Result.bind x ~f in
  let rec worker (sexp : Sexp.t) : (Sexp.t, string) result =
    match sexp with
    | Sexp.Atom _ -> Ok sexp
    | Sexp.List [] -> Ok sexp
    | Sexp.List (f_sexp :: args) -> (
        let* f_sexp = worker f_sexp in
        match f_sexp with
        | Sexp.Atom f_str -> (
            match String.Map.find macros f_str with
            | Some f_fun ->
                let* sexp' = f_fun args in
                worker sexp'
            | None ->
                let* args = List.map ~f:worker args |> Result.all in
                Ok (Sexp.List (f_sexp :: args)) )
        | _ ->
            let* args = List.map ~f:worker args |> Result.all in
            Ok (Sexp.List (f_sexp :: args)) )
  in
  worker sexp

let gensym = let counter = ref 0 in
  fun prefix ->
    let i = !counter in
    counter := i + 1;
    Sexp.Atom ("__" ^ prefix ^ (string_of_int i))



let binop (op_str : string) : (string, string) Result.t =
  match op_str with
  | "+" -> Ok "bvadd"
  | "-" -> Ok "bvsub"
  | "*" -> Ok "bvmul"
  | "<<" -> Ok "bvshl"
  | ">>" -> Ok "bvshr"
  | "&" -> Ok "bvand"
  | "|" -> Ok "bvor"
  | "%" -> Ok "bv"
  | "u<" -> Ok "bvult"
  | "<" ->
      Error
        "Please specify the signedness of the '<' operator as either 'u<' or \
         's<'"
  | _ -> Error (sprintf "Unrecognized operation %s" op_str)

(* macro0 might as well go in the prelude file as defines. Uh.. is that true?
 Maybe there asre some things that can be done
*)
let macro0 name (sexp_str : string) : string * macro =
  ( name,
    fun args ->
      match args with
      | [] -> Ok (Sexp.of_string sexp_str)
      | _ -> Error (sprintf "Macro %s expected no arguments" name) )

(* This might as well not be a macro. *)

(* let quasiquote s = Format.sprintf s *)

let let_ v e body = 
  Sexp.List [ Sexp.Atom "let"; Sexp.List [Sexp.List [ v; e ]] ; body ]

let fun1 name = fun x -> Sexp.List [Sexp.Atom name; x]
let fun2 name = fun x y -> Sexp.List [Sexp.Atom name; x; y]
let fun3 name = fun x y z -> Sexp.List [Sexp.Atom name; x; y; z]

let not_ = fun1 "not"
let and_ = fun2 "and"

let impl = fun2 "=>"
let ite = fun3 "ite"
let if_ = fun3 "if"
let false_ = Sexp.Atom "false"
let true_ = Sexp.Atom "true"
let skip = Sexp.Atom "skip"

let assert_ = fun1 "assert"

let forall = fun2 "forall"


let command c = Sexp.List [Sexp.Atom c]
let push = command "push"
let pop = command "pop"
let check_sat = command "check-sat"
let echo = fun1 "echo"
(*
let ($) f x = Sexp.List [ f ; x ]
*)

(*
(define-method )

The expressions of our language are literally smtlib expressions.


*)

(*

validate anything I expect to be a valid smtlib expression using an smtlib library.

*)

type method_ = {
  pre : Sexp.t;
  post : Sexp.t;
  args : Sexp.t list
}

(* Method registry is populated for the use of calling methods frtom other methods. *)
let method_registry : (string, method_) Hashtbl.t = Hashtbl.create (module String)
let register_method name ~args ~pre ~post : unit = Hashtbl.set ~key:name ~data:{pre; post; args} method_registry

(*
right hand side of on assignment may contain 
*)

let tuple_of_sexp sexp =
  match sexp with
  | Sexp.List [a; b] -> (a,b)
  | _ -> failwith "unexpected form in tuple_of_sexp"

let alist_of_sexp args = List.map args ~f:tuple_of_sexp

let get_atom s = match s with
   | Sexp.Atom a -> a
   | _ -> failwith "used get_atom on non atom"




   
(* 

validate : -> bool

Or should I actually parse into my language?

type expr = Sexp.t
type stmt = 
  | Set of string * expr
  | While of {cond : expr; inv : expr; body : stmt list}
  | Assert of expr
  | Assume of expr
  | If of {cond : expr; then_ : list stmt ; else_ : stmt list}

*)

(* This is not right. We should recursively go into *)
let set_set stmts = List.fold stmts ~init:String.Set.empty ~f:(fun acc stmt -> 
  match stmt with
  | [Sexp.Atom "set"; Sexp.Atom v; expr] -> String.Set.add acc v
  | _ -> acc
  )


(* identifiers can be sexp though. (_ x 1) is a valid identifier. Sigh. EVerything always has to be complicated 
type type_env = Sexp.t String.Map.t
let rec wp_stmt (gamma : Sexp.t String.Map.t) stmt : (type_env * Sexp.t -> Sexp.t)
*)

(*

One verification condition per file? Then we could output
We should include in the comments the source line number. I should convert over to using annotated sexp.

Dafny does not really require type annotations.


*)



let rec wp_stmt s : Sexp.t -> Sexp.t = 
  match s with
  | Sexp.List (Sexp.Atom stmt :: args) ->
     (match stmt, args with
     | "var", vars -> fun post -> forall (Sexp.List vars) post
     | "havoc", v -> 
     | "skip", [] -> fun post -> post
     | "abort", [] -> fun _post -> false_
     | "assert", [q] -> fun post -> and_ q post
     | "assume", [q] -> fun post -> impl q post
     | "set", [v; e] -> fun post -> let_ v e post
     | "if", [c; t; e] -> fun post -> ite c (wp_stmt t post) (wp_stmt e post)
     (* | "when", [c; body] -> wp_stmt (if_  c body skip) (* fun post -> and_ (impl c (wp_stmt body post)) (impl (not_ c) post) *) *)
     | "while", c :: frame :: inv :: body -> fun post ->

      (* The poitn of the frame is to try and require less x == x_init invariant conditions
         I'd have to quantify over everything which is a pain also.
         If I give a bad frame, is it unsound?
         So maybe outputting a seperate verification condition is better.

      *)
        and_ inv
        (forall_ frame
              (impl inv (ite c (wp_stmts body inv) post) )
        )
          (*  and_ i
          (and_ (impl (and_ i c) (wp_stmts body i))
               (impl (and_ i (not_ c)) post))
               *)
               (*
               
               *)
     
    (* | "cond"
     | "progn"  ->
     | "return" ->
     | "tagbody" ->
     | "go" -> *)
     | _ ->
        match Hashtbl.find method_registry stmt with
        | None -> failwith "unmatched stmt form"
        | Some {f_args; pre; post} ->
           (* let args' = List.map ~f:gensym args' in *)
           let rebind p = let_ (List.map2_exn ~f:sexp_of_tuple f_args args) p in
            wp_stmts [
              assert_ (rebind pre);
              assume_ (rebind post);
            ]

     (* | "if", [c; t] -> fun post -> and_ (impl c (wp_stmt t)) (impl (not_ c) post)   *) 
     )
  | _ -> failwith "unmatched stmt"
and wp_stmts stmts = fun post -> List.fold_right stmts ~init:post ~f:(fun s post -> wp_stmt s post)

let prog stmts = 
  Ok (assert_ (List.fold_right stmts ~init:true_ ~f:(fun s post -> wp_stmt s post )))

(* 
let rec subst key e sexp =
  match sexp with
  | Sexp.Atom a -> if String.(a = key) then e else sexp
  | Sexp.List xs -> 
      match xs with
      | Sexp.Atom "let" :: args :: body -> 
      | _ -> List.map ~f:(subst key e) xs
*)

(*
calc macro

*)
let keyword_args args : Sexp.t String.Map.t * Sexp.t list =
 let rec worker keymap posargs args =
  match args with
  | [] -> keymap, posargs
  | x :: xs -> match x with
              | Sexp.Atom k -> begin
                    if Char.equal (String.get k 0) ':' then
                        match xs with
                        | v :: xs -> worker (String.Map.set keymap ~key:k ~data:v) posargs xs
                        | [] -> failwith (sprintf "expected keyword argument after %s" k)
                        else worker keymap (x :: posargs) xs

                    end
              | _ -> worker keymap (x :: posargs) xs
                  in
  let (keymap, args) = worker String.Map.empty [] args in
  (keymap, List.rev args)


let frame stmts = 

let calc args = 


(*
defines function with
pre and post conditions
and termination.


smtlib supports a couple quantifiers, but the most overlooked and extremely useful one is let bindings.
Programmatic interfaces tend to not even expose let bindings.
Let bindings are frozen substitution. They allow metaprogramming of smtlib expression to let the smt solver itslef perform substitions. 
This allows shared subexpressions, and lets the produced smtlib term more closesly reflect the strucutre of the original input.

The weakest precondition for assignment and function calls? is much prettier if you allow yourself `let`.

*)
let define_function = ()

(*
Any houdini style annotation guesses can be input as or expressions.
*)
(*

Sexp.t -> (Sexp.t, string) Result

lift f = fun anno_sexp -> Annotated.get_sexp anno_sexp |> f
Sexp.Annotated.

differentiation as a metalevel construct
I guess the most natural thing to do is defunctionlwize if I need to internalize differentiation.

  I can't reuse the interpeted + * operations?
  Z3 may not ematch on them so I can inject into them but hard to return
  
  (diff sin)

(*
defunctionalized pairs and their implementation.
Inject these defininig axioms
*)
let defunc_table = 

diff(sin) = cos
comp( sin, cos ) = fmul( comp(neg,comp(cos,sin)), )

apply(fmul(a,b), x) <-> apply(a,x) * apply(b,x)

minimal number of uses of such and such a symbol. (integration sign in this case)



let deriv args = match args with
  | "sin" -> neg_ cos_
  | "cos" -> sin_
  | "exp" -> exp_
  | "mul" [] -> zero_
  | "mul" a :: b ->
  | "add" ->

The first goal should be to verify invariants of differential equations.
Everything is specified. In principle it is a mechanical prcoedure without require much smarts.

*)

type sexp = Sexp.Annotated.t

let define_method (args : Sexp.t list) : Sexp.t list =
  let keyargs, args = keyword_args args in
  let pre = Option.value ~default:true_ (String.Map.find keyargs ":pre") in
  let post = Option.value ~default:true_ (String.Map.find keyargs ":post") in
  match args with
  | (Sexp.Atom name) :: vars :: body ->
    let () = register_method name ~args ~pre ~post in
    let post' = wp_stmts body post in
    let vc = (forall vars (impl pre post')) in
      [
        echo (Sexp.Atom (sprintf "verifying %s" name));
        push;
        assert_ vc;
        check_sat;
        pop;
      ]
  | _ -> (Format.printf "missing necessary parameters to defmethod %a" (Format.pp_print_list Sexp.pp_hum) args); failwith "foo"

(*

So it is real easy to fuck stuff up.
Keyword arguments might help a little.
But also, error reporting to lines.


*)

let macros' = String.Map.of_alist_exn [
  "define-method" , define_method
  ]

let apply_macro' s = 
 match s with
 | Sexp.List ((Sexp.Atom m) :: xs) -> (match String.Map.find macros' m with
                          | Some f -> f xs
                          | None -> [s])
 | _ -> [s]

let macros = String.Map.of_alist_exn [
  "prog" , prog  
  ]
(*  mem_equiv_start; *)

(*
Hmm.
Sexp.t is my master type

Maybe it does make sense to do this finally tagless.


Making a refinement interpreter seems cool too.
F* style?
Trying to do smtlib3?
(the x type) seems standard
(deftype )

I could also possibly call z3?
Automatic defunctionalization?


*)

module Interpreter = struct 

end

module MySexp = struct
  (*
  
  It may be desirable to make my own sexp so I havbe deeper control over formatting.
  In addition, I could do my sexp smtlib compliant in regards to quoting.

  type t = Comment of | Sexp of Sexp.t doesn't work.
  *)
  type t = Atom of string | List of t list | Comment of string
  (* just strip out the comments. *)
  let of_sexp = ()
  let to_sexp = () 
end

let run filename =
  let file = In_channel.create filename in
  let sexps = Sexp.Annotated.input_sexps file in
  (* let res = List.map ~f:(macro_run macros) sexps |> Result.all in *)
  let res = List.concat_map ~f:apply_macro' sexps in
  Format.printf "%a\n" (Format.pp_print_list Sexp.pp_hum) res
  (* match res with
  | Error s -> Format.printf "Error: %s" s
  | Ok sexps ->
      Format.printf "%a\n" (Format.pp_print_list Sexp.pp_hum) sexps *)

let filename_param =
  let open Command.Param in
  anon ("filename" %: string)

let command =
  Command.basic ~summary:"Apply Macros to an SMTLIB file"
    ~readme:(fun () -> "More detailed information")
    (Command.Param.map filename_param ~f:(fun filename () -> run filename))

let () = Command.run ~version:"1.0" ~build_info:"RWO" command



(*
let bounded_forall_macro var start end' body =
  let let_form i =
    Sexp.List
      [ Sexp.Atom "let"; Sexp.List [ var; Sexp.Atom (Int.to_string i) ]; body ]
  in
  let l = List.map ~f:let_form (List.range start end') in
  Sexp.List (Sexp.Atom "and" :: l)

type field_info = { id : string; offset : int; size : int }

type struct_info = { id : string; fields : field_info list }


let binop op a b = Sexp.List [ Sexp.Atom op; a; b ]

let bvadd a b = binop "bvadd" a b 

let select mem k = binop "select" mem k
let store mem k v = Sexp.List [ Sexp.Atom "store"; mem; k ; v]

let concat (xs : Sexp.t list) : Sexp.t = Sexp.List (Sexp.Atom "concat" :: xs)

let bv width val' =
  Sexp.List
    [
      Sexp.Atom "_";
      Sexp.Atom (sprintf "bv%n" val');
      Sexp.Atom (Int.to_string width);
    ]
let define_fun name args ret body = 
  Sexp.List [Sexp.Atom name; Sexp.List args; ret; body] 
  
let bv_sort width =  Sexp.List
[
  Sexp.Atom "_";
  Sexp.Atom "BitVec";
  Sexp.Atom (Int.to_string width);
]
(*
(* TODO: concat full size. init mod, orig *)
let struct_accessors (si : struct_info) : Sexp.t list =
  List.map si.fields ~f:(fun fi ->
    let name = sprintf "%s-%s" si.id fi.id in
    let args = [Sexp.of_string "(p pointer)"] in
    let body = select (Sexp.Atom "mem") (bvadd (Sexp.Atom "p") (bv fi.offset 64)) in
    define_fun name args (bv_sort 8) body
    )

let struct_setters (si : struct_info) : Sexp.t list =
  List.map si.fields ~f:(fun fi ->
    let name = sprintf "%s-%s!" si.id fi.id in
    let args = [Sexp.of_string "(p pointer)"; Sexp.of_string "(v bv8)"; Sexp.of_string "(mem memsort)"] in
    let body = store (Sexp.Atom "mem") (bvadd (Sexp.Atom "p") (bv fi.offset 64)) in
    define_fun name args (bv_sort 8) body
    )
*)

*)

(*
An alternative
(color-red-offset p)
(color-red p) = (p + offset) == &(p->color_red) in C syntax.
Is it possible for a sturct to be in registers?
(store mem (color-red p) 0x8)
Then this works with mem vals
*)
(*
(mem_orig_vals  
  (p1 v1)
  (p2 v2)
  (p3 v3)
  ()
) ---> (and (= (select mem p1) v1 ) (select) (  select ))
(store* mem () () () () ()) -> store (store (store (store )))
(concat-select mem p1 p2 p3 p4) --> (concat (select mem p1) (select mem p2) () )

vararg functions basically need to be macros.
Well. I could enumerate up to some number
concat-select3


let multi_store_mem_macro ptr_vals = 
  ptrvals = List.map ~f(fun sexp -> match sexp with
                          | Sexp.List [ptr;va] -> Ok (ptr,val)
                          | _ -> Error "In struct macro key value pair mismatch" ) |> Result.all
  List.fold ~init:(Sexp.Atom "mem") ptrvals ~f:(fun acc (p,v) ->
      store acc p v
  )

*)

(* 
let struct_macro (si : struct_info) : (string * macro) list =
  List.map si.fields ~f:(fun fi ->
    let macro_name = sprintf "%s-%s" si.id fi.id in
    let macro args = 
      match args with
      | [var; value] -> Sexp.List [Sexp.Atom "bvadd"   Sexp.Atom fi.offset  ]
      | _ -> Err (sprintf "Field accessor macro %s expected two values. Received (bv %a)" macro_name args)
    in
    macro_name, macro
  )
*)
let bv_mode = ()

(*
   Can I locally overload all operators using a let? let ((< bvlute))
   alternatively:
   run_macro [bv_macros]

   This is seperate in principle from infix mode.
*)

let c_expr = ()

(*


 accepts a string (since c won't parse as a sexp)
 run frontc on it.
 parse_expr
 (cexpr    )
 (cblock)
 (cstmt )
 (cmode
 '
   x = 7;
   a[2] = 3;
   a[4] == a[5]
  ') --->
    (proc
    (x := 7)
    (a(3) := 3)
    ((select mem (bvadd a 4)) )
    )

    We'll need variable to type mappings.
    Are we duplicating effort here? Hmmmmm.


*)



(*

(* args-equal and retvals-equal *)
let def_pto_stack env =
  let pointer_sort = get_pointer_sort env in
  let x = Z3.Expr.mk_fresh_const (Env.get_context env) "x" pointer_sort in
  define_fun "pto-stack"  [sexp_of_expr x, sexp_of_sort pointer_sort] (sexp_of_expr (Env.in_stack env x))
  let mem_sort dom cod = Sexp.List [Sexp.Atom "Array"; dom ; cod ]
  let bv_sort_of_var (v : Var.t) : Sexp.t =
    let typ = Var.typ v in
    match typ with
    | Imm w -> bv_sort w
    | Type.Mem (i_size, w_size) -> mem_sort
                        (bv_sort (Size.in_bits i_size))
                        (bv_sort (Size.in_bits w_size))
    | Unk -> failwith "bv_sort_of_var: Unrecognized sort type"

    let bv_sort width = Sexp.List [
      Sexp.Atom "_";
      Sexp.Atom "BitVec";
      Sexp.Atom (Int.to_string width);
      ]
    
*)

(* 





let infix_macro (args : Sexp.t list) : (Sexp.t, string) result =

let bv_const (args : Sexp.t list) : (Sexp.t, string) result =
  match args with
  | [Sexp.Atom bitwidth; Sexp,Atom value] -> 
        let* bw =  to_int bitwidth in
        let* value = to_int64 value in
        sprintf "#x%0" yada yada
  | _ -> Err (sprintf "Bitvector macro expected two constant values. Received (bv %a)" args)

let array

(* a proc or begin macro? vs the more specialized array macro

*)
let array_macro (args : Sexp.t list) : (Sexp.t, string) result =
  



(*
lisp style struct access
(setf (ship-x-position ship2) 100) 
(type-field foo) ==> ()



*)

let stdlib_macros =[
  "@array", begin_macro;
  "@bv", bv_const;


]
*)
